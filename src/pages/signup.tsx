import * as S from "screens/signup/styles";
import { NextPageWithLayout } from "@app-types";
import { useState } from "react";
import { FcGoogle } from "react-icons/fc";
import {
  InputLabel,
  FormControl,
  Button,
  InputAdornment,
  IconButton,
  OutlinedInput,
  FormHelperText,
} from "@mui/material";
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { useFormik } from "formik";
import * as Yup from "yup";
import Link from "next/link";
import {
  useAuth,
  AuthProviders,
  AuthStatus,
  preventAuthUsersMiddleware,
} from "core/modules/authentication";
import { useRouter } from "next/router";
import Head from "next/head";
import { GetServerSideProps } from "next";

const SignupSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, "Too Short, min 2 characters")
    .max(50, "Too Long, max 50 characters")
    .required("Name required"),
  email: Yup.string().email("Invalid email").required("Email required"),
  password: Yup.string()
    .min(8, "Too Short, min 8 characters")
    .required("Password required"),
});

export const getServerSideProps: GetServerSideProps<{}> =
  preventAuthUsersMiddleware(async context => {
    return {
      props: {},
    };
  });

interface PageProps {}

const Page: NextPageWithLayout<PageProps> = ({}) => {
  const router = useRouter();
  const { session, signUp, signInWithProvider } = useAuth();

  const handleGoogleSignIn = async () => {
    signInWithProvider(AuthProviders.Google);
  };

  if (session.status === AuthStatus.Authenticated) {
    router.push(`/${session.user._id}`);
  }

  const formik = useFormik({
    initialValues: {
      name: "",
      email: "",
      password: "",
    },
    onSubmit: ({ name, password, email }) => {
      signUp({
        name,
        email,
        password,
      });
    },
    validationSchema: SignupSchema,
  });

  const [passwordShown, setPasswordShown] = useState(false);

  return (
    <>
      <Head>
        <title>Create account | Daiko</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <S.Container>
        <S.Title>Create Account</S.Title>

        <S.Form onSubmit={formik.handleSubmit}>
          <FormControl error={formik.touched.name && !!formik.errors.name}>
            <InputLabel htmlFor="name">Name</InputLabel>
            <OutlinedInput
              id="name"
              label="Name"
              {...formik.getFieldProps("name")}
            />
            {formik.touched.name && !!formik.errors.name && (
              <FormHelperText>{formik.errors.name}</FormHelperText>
            )}
          </FormControl>

          <FormControl error={formik.touched.email && !!formik.errors.email}>
            <InputLabel htmlFor="email">Email</InputLabel>
            <OutlinedInput
              id="email"
              label="Email"
              {...formik.getFieldProps("email")}
            />
            {formik.touched.email && !!formik.errors.email && (
              <FormHelperText>{formik.errors.email}</FormHelperText>
            )}
          </FormControl>

          <FormControl
            error={formik.touched.password && !!formik.errors.password}
          >
            <InputLabel htmlFor="password">Password</InputLabel>
            <OutlinedInput
              label="Password"
              id="password"
              {...formik.getFieldProps("password")}
              type={passwordShown ? "type" : "password"}
              endAdornment={
                <InputAdornment position="end">
                  <IconButton
                    aria-label="toggle password visibility"
                    onClick={() => {
                      setPasswordShown(prev => !prev);
                    }}
                    edge="end"
                  >
                    {passwordShown ? <VisibilityOff /> : <Visibility />}
                  </IconButton>
                </InputAdornment>
              }
            />
            {formik.touched.password && !!formik.errors.password && (
              <FormHelperText>{formik.errors.password}</FormHelperText>
            )}
          </FormControl>

          <Button variant="contained" type="submit">
            Sign up
          </Button>
        </S.Form>
        <Button
          fullWidth
          variant="outlined"
          onClick={handleGoogleSignIn}
          sx={{ gap: "20px" }}
        >
          <FcGoogle size={20} /> Sign in with Google
        </Button>
        <Link href="/signin">
          Already have an account? <strong>Sign in</strong>
        </Link>
      </S.Container>
    </>
  );
};

export default Page;
